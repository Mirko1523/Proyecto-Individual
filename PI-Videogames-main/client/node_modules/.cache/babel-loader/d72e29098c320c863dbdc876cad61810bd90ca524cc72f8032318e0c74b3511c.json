{"ast":null,"code":"const initialState = {\n  // allGames: [],\n  gamesBackUp: [],\n  gameDetails: {},\n  genres: [],\n  filtered: []\n};\nexport default function rootReducer(state = initialState, action) {\n  // recibe el estado y la accion\n  switch (action.type) {\n    // dependiendo del tipo de accion, se ejecuta un case\n    case 'GET_ALL_GAMES':\n      // si la accion es GET_ALL_GAMES\n      return {\n        // devuelve el estado\n        ...state,\n        allGames: action.payload,\n        gamesBackUp: action.payload,\n        filtered: action.payload\n        //backup : [...state.filteredVideogames]\n      };\n    // el payload es la respuesta de la ruta /videogames\n\n    case 'CLEAN':\n      return {\n        ...state,\n        gameDetails: {}\n      };\n    // limpia el estado de gameDetails\n\n    case 'VOLVER_A_HOME':\n      return {\n        ...state,\n        filtered: state.gamesBackUp\n      };\n    // vuelve a mostrar todos los juegos\n    case 'GET_VIDEOGAME_DETAIL':\n      return {\n        ...state,\n        gameDetails: action.payload\n      };\n    // guarda el juego en el estado de gameDetails\n\n    case 'SEARCH_BY_NAME':\n      return {\n        ...state,\n        //gamesBackUp: action.payload,\n        filtered: action.payload\n      };\n    // el payload es el array de juegos filtrados\n\n    case 'GET_GENRES':\n      return {\n        ...state,\n        genres: action.payload\n      };\n    // devuelve el tipo de acción y el payload\n\n    case 'FILTER_BY':\n      if (action.payload === 'default') {\n        return {\n          ...state,\n          filtered: state.gamesBackUp\n        };\n      } // si el payload es default, devuelve todos los juegos\n\n      if (action.payload === 'DB') {\n        return {\n          ...state,\n          filtered: state.gamesBackUp.filter(game => typeof game.id === 'string')\n        };\n      } // si el payload es DB, devuelve los juegos de la base de datos\n\n      if (action.payload === 'API') {\n        return {\n          ...state,\n          filtered: state.gamesBackUp.filter(game => typeof game.id === 'number')\n        };\n      } // si el payload es API, devuelve los juegos de la API\n      else {\n        return {\n          ...state,\n          filtered: state.gamesBackUp.filter(game => {\n            return game.genres.find(genre => {\n              return genre === action.payload;\n            });\n          })\n        }; // si el payload es un género, devuelve los juegos que contengan ese género\n      }\n      ;\n    case 'ORDER_BY':\n      if (action.payload === 'A-Z') {\n        return {\n          ...state,\n          filtered: [...state.filtered].sort((prev, next) => {\n            if (prev.name > next.name) return 1;\n            if (prev.name < next.name) return -1;\n            return 0;\n          })\n        };\n      } // si el payload es A-Z, devuelve los juegos ordenados alfabéticamente de la A a la Z\n\n      if (action.payload === 'Z-A') {\n        return {\n          ...state,\n          filtered: [...state.filtered].sort((prev, next) => {\n            if (prev.name > next.name) return -1;\n            if (prev.name < next.name) return 1;\n            return 0;\n          })\n        };\n      } // si el payload es Z-A, devuelve los juegos ordenados alfabéticamente de la Z a la A\n\n      if (action.payload === 'desc') {\n        return {\n          ...state,\n          filtered: [...state.filtered].sort((prev, next) => prev.rating - next.rating)\n        };\n      } // si el payload es desc, devuelve los juegos ordenados de mayor a menor rating\n\n      if (action.payload === 'asc') {\n        return {\n          ...state,\n          filtered: [...state.filtered].sort((prev, next) => next.rating - prev.rating)\n        };\n      } else {\n        return {\n          ...state,\n          filtered: state.gamesBackUp\n        };\n      }\n      ;\n    // si el payload es default, devuelve todos los juegos\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"names":["initialState","gamesBackUp","gameDetails","genres","filtered","rootReducer","state","action","type","allGames","payload","filter","game","id","find","genre","sort","prev","next","name","rating"],"sources":["C:/Users/mirko/Desktop/Proyecto Individual Mirko Miler FT-45B/Proyecto-Individual/PI-Videogames-main/client/src/reducers/reducers.js"],"sourcesContent":["const initialState = {\n   // allGames: [],\n    gamesBackUp: [],\n    gameDetails: {},\n    genres: [],\n    filtered: []\n};\n\nexport default function rootReducer(state = initialState, action) { // recibe el estado y la accion\n    switch (action.type) { // dependiendo del tipo de accion, se ejecuta un case\n           case 'GET_ALL_GAMES': // si la accion es GET_ALL_GAMES\n                return { // devuelve el estado\n                    ...state,\n                    allGames: action.payload,\n                    gamesBackUp: action.payload,\n                    filtered: action.payload\n                    //backup : [...state.filteredVideogames]\n            }; // el payload es la respuesta de la ruta /videogames\n\n            case 'CLEAN':\n                return{\n                    ...state,\n                    gameDetails: {}\n                } // limpia el estado de gameDetails\n\n            case 'VOLVER_A_HOME':\n                return {...state,\n                    filtered: state.gamesBackUp\n                } // vuelve a mostrar todos los juegos\n            case 'GET_VIDEOGAME_DETAIL':\n                return {\n                ...state,\n                gameDetails: action.payload\n            }; // guarda el juego en el estado de gameDetails\n\n            case 'SEARCH_BY_NAME':\n                return {\n                ...state,\n                //gamesBackUp: action.payload,\n                filtered: action.payload\n            }; // el payload es el array de juegos filtrados\n\n            case 'GET_GENRES': \n                return {\n                    ...state,\n                    genres: action.payload \n                }; // devuelve el tipo de acción y el payload\n                \n            case 'FILTER_BY':\n                    if (action.payload === 'default'){\n                        return {...state, filtered: state.gamesBackUp}\n                        } // si el payload es default, devuelve todos los juegos\n                      \n                    if(action.payload === 'DB'){\n                        return {...state, filtered: state.gamesBackUp.filter((game)=> (typeof game.id) === 'string')}\n                        } // si el payload es DB, devuelve los juegos de la base de datos\n                      \n                    if(action.payload === 'API'){\n                        return {...state, filtered: state.gamesBackUp.filter((game)=> (typeof game.id) === 'number')}\n                        } // si el payload es API, devuelve los juegos de la API\n                      \n                    else {\n                        return {...state, filtered: state.gamesBackUp.filter((game) => {\n                            return game.genres.find((genre) => {\n                                return genre === action.payload})\n                        })} // si el payload es un género, devuelve los juegos que contengan ese género\n                    };\n\n            case 'ORDER_BY':\n                if(action.payload === 'A-Z'){\n                    return {...state, filtered: [...state.filtered].sort((prev, next) => {\n                        if(prev.name > next.name) return 1\n                        if(prev.name < next.name) return -1\n                        return 0\n                    })}} // si el payload es A-Z, devuelve los juegos ordenados alfabéticamente de la A a la Z\n                      \n                if(action.payload === 'Z-A'){\n                    return {...state, filtered: [...state.filtered].sort((prev, next) => {\n                        if(prev.name > next.name) return -1\n                        if(prev.name < next.name) return 1\n                        return 0\n                    })}} // si el payload es Z-A, devuelve los juegos ordenados alfabéticamente de la Z a la A\n                      \n                if(action.payload === 'desc'){\n                    return {...state, filtered: [...state.filtered].sort((prev,next) => prev.rating - next.rating)}\n                   } // si el payload es desc, devuelve los juegos ordenados de mayor a menor rating\n                      \n                if(action.payload === 'asc'){\n                    return {...state, filtered: [...state.filtered].sort((prev,next) => next.rating - prev.rating)}\n                    }     \n                else {\n                    return {...state, filtered: state.gamesBackUp}\n                    }; // si el payload es default, devuelve todos los juegos\n        default: \n            return state;\n    }\n         \n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}