{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mirko\\\\Desktop\\\\Proyecto Individual Mirko Miler FT-45B\\\\Proyecto-Individual\\\\PI-Videogames-main\\\\client\\\\src\\\\components\\\\Pagination\\\\Pagination.js\";\nimport React from 'react';\nimport './pagination.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination({\n  cardPerPage,\n  totalCards,\n  paginate,\n  currentPage\n}) {\n  //recibo las props de Videogames.js\n\n  if (Math.ceil(totalCards / cardPerPage) < currentPage) {\n    // si la cantidad de páginas es menor a la página actual, entonces la página actual es la última página\n    paginate(1); // actualiza el estado de la página actual\n  }\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalCards / cardPerPage); i++) {\n    //redondea los personajes sobre la cantidad de personajes que tengo por pagina.\n    pageNumbers.push(i); // lo pusheo ---> [1,2,3,4,5,6,7,8,9,10]\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pag-div\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /* {pageNumbers.length > 1 && // si hay más de una página, muestra los botones de paginación */pageNumbers === null || pageNumbers === void 0 ? void 0 : pageNumbers.map((p, i) =>\n      // recorre el array de números de página\n      p === currentPage ?\n      /*#__PURE__*/\n      // si el número de página es igual al número de página actual, muestra el botón de la página actual\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pag-btn\",\n          onClick: () => paginate(p),\n          children: p\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 19\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pag-btn\",\n          onClick: () => paginate(p),\n          children: p\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 19\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n}\n_c = Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Pagination","cardPerPage","totalCards","paginate","currentPage","Math","ceil","pageNumbers","i","push","className","children","map","p","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mirko/Desktop/Proyecto Individual Mirko Miler FT-45B/Proyecto-Individual/PI-Videogames-main/client/src/components/Pagination/Pagination.js"],"sourcesContent":["import React, {} from 'react'\nimport './pagination.css'\n\n\nexport default function Pagination({ cardPerPage, totalCards, paginate, currentPage }) { //recibo las props de Videogames.js\n    \n  if(Math.ceil(totalCards / cardPerPage ) < currentPage ) { // si la cantidad de páginas es menor a la página actual, entonces la página actual es la última página\n    paginate(1) // actualiza el estado de la página actual\n  }\n\n    const pageNumbers = [];\n    for(let i = 1; i <= Math.ceil(totalCards / cardPerPage ); i++){ //redondea los personajes sobre la cantidad de personajes que tengo por pagina.\n        pageNumbers.push(i); // lo pusheo ---> [1,2,3,4,5,6,7,8,9,10]\n    }\n\n    return (\n      <div className=\"pag-div\">\n        <ul>\n          {/* {pageNumbers.length > 1 && // si hay más de una página, muestra los botones de paginación */\n\n            pageNumbers?.map((p, i) => // recorre el array de números de página\n              p === currentPage ? ( // si el número de página es igual al número de página actual, muestra el botón de la página actual\n                <li key={i}> \n                  <button className=\"pag-btn\" onClick={() => paginate(p)}> \n                  {/* // al hacer click, ejecuta la función paginate, que actualiza el estado de la página actual */}\n                    {p}\n                  </button>\n                </li>\n              ) : (\n                <li key={i}>\n                  <button className=\"pag-btn\" onClick={() => paginate(p)}>\n                    {p}\n                  </button>\n                </li>\n              )\n            )}\n        </ul>\n      </div>\n    );\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAU,OAAO;AAC7B,OAAO,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzB,eAAe,SAASC,UAAUA,CAAC;EAAEC,WAAW;EAAEC,UAAU;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAE;;EAEvF,IAAGC,IAAI,CAACC,IAAI,CAACJ,UAAU,GAAGD,WAAY,CAAC,GAAGG,WAAW,EAAG;IAAE;IACxDD,QAAQ,CAAC,CAAC,CAAC,EAAC;EACd;EAEE,MAAMI,WAAW,GAAG,EAAE;EACtB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,IAAI,CAACC,IAAI,CAACJ,UAAU,GAAGD,WAAY,CAAC,EAAEO,CAAC,EAAE,EAAC;IAAE;IAC5DD,WAAW,CAACE,IAAI,CAACD,CAAC,CAAC,CAAC,CAAC;EACzB;EAEA,oBACET,OAAA;IAAKW,SAAS,EAAC,SAAS;IAAAC,QAAA,eACtBZ,OAAA;MAAAY,QAAA,EACG,+FAECJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,GAAG,CAAC,CAACC,CAAC,EAAEL,CAAC;MAAK;MACzBK,CAAC,KAAKT,WAAW;MAAA;MAAK;MACpBL,OAAA;QAAAY,QAAA,eACEZ,OAAA;UAAQW,SAAS,EAAC,SAAS;UAACI,OAAO,EAAEA,CAAA,KAAMX,QAAQ,CAACU,CAAC,CAAE;UAAAF,QAAA,EAEpDE;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MAAC,GAJFV,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKN,CAAC,gBAELnB,OAAA;QAAAY,QAAA,eACEZ,OAAA;UAAQW,SAAS,EAAC,SAAS;UAACI,OAAO,EAAEA,CAAA,KAAMX,QAAQ,CAACU,CAAC,CAAE;UAAAF,QAAA,EACpDE;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MAAC,GAHFV,CAAC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIN,CAER;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ;AAACC,EAAA,GAnCuBnB,UAAU;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}