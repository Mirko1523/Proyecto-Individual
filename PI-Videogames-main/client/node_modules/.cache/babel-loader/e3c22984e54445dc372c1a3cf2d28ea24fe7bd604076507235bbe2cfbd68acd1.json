{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mirko\\\\Desktop\\\\Proyecto Individual Mirko Miler FT-45B\\\\Proyecto-Individual\\\\PI-Videogames-main\\\\client\\\\src\\\\components\\\\Videogames\\\\Videogames.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport SearchBar from '../SearchBar/SearchBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Videogame from '../VideoGame/Videogame';\nimport Pagination from '../Pagination/Pagination';\nimport FilteredBy from '../FilterBy/FilterBy';\nimport './videogames.css';\nimport { getAllGames, getGenres } from '../../actions/actions';\nimport notFound from '../../img/llorando.gif';\nimport loading from '../../img/loading.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Videogames() {\n  _s();\n  console.log('se ejetuto el constructor');\n  let allGames = useSelector(state => state.filtered); //me traigo el estado global\n  const dispatch = useDispatch(); //meto el metodo en una variable\n  const [currentPage, setCurrentPage] = useState(1); // estado de la página actual\n\n  const [cardPerPage] = useState(15); // cantidad de cards por página\n\n  //* indices de la paginación:\n  const indexOfLastCard = currentPage * cardPerPage; // valor (15)\n  const indexOfFirstCard = indexOfLastCard - cardPerPage; // valor (0)\n\n  const currentCards = allGames.slice(indexOfFirstCard, indexOfLastCard); // declara en la constante currentCards los \"cards\" que se deben mostrar en la pantalla (15)\n\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber); // actualiza el estado de la página actual\n  };\n  useEffect(() => {\n    console.log('se monto');\n    if (allGames.length === 0) {\n      // si no hay juegos cargados en el estado global, entonces los carga\n      dispatch(getAllGames()); //despacho la accion al reducer\n      dispatch(getGenres());\n    } //despacho la accion al reducer\n  }, [allGames.length, dispatch]); //si el estado de allGames cambia, se ejecuta el useEffect\n\n  useEffect(() => {\n    return () => console.log('se desmonto');\n  }, []); //indico que quiero que haga una vez desmontado\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FilteredBy, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination // envío las props a Pagination.js\n    , {\n      cardPerPage: cardPerPage // cantidad de cards por página\n      ,\n      totalCards: allGames.length // cantidad total de cards\n      ,\n      paginate: paginate // función que actualiza el estado de la página actual\n      ,\n      currentPage: currentPage // página actual\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"games-div\",\n      children: currentCards.length >= 1 ?\n      // si hay juegos en el estado global, los muestra\n      currentCards.map(g =>\n      /*#__PURE__*/\n      // recorre el array de juegos\n      _jsxDEV(Videogame // envía las props a Videogame.js\n      , {\n        name: g.name,\n        rating: g.rating,\n        genres: g.genres,\n        image: g.background_image,\n        id: g.id\n      }, g.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this)) : typeof currentCards === \"string\" ?\n      /*#__PURE__*/\n      // si no hay juegos en el estado global, muestra un mensaje de error\n      _jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"nonono\",\n          src: notFound,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"loading\",\n          src: loading,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      cardPerPage: cardPerPage,\n      totalCards: allGames.length,\n      paginate: paginate,\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n_s(Videogames, \"KYty+1nNzeduskjsaFKTMhnLkcc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Videogames;\nvar _c;\n$RefreshReg$(_c, \"Videogames\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","SearchBar","useDispatch","useSelector","Videogame","Pagination","FilteredBy","getAllGames","getGenres","notFound","loading","jsxDEV","_jsxDEV","Videogames","_s","console","log","allGames","state","filtered","dispatch","currentPage","setCurrentPage","cardPerPage","indexOfLastCard","indexOfFirstCard","currentCards","slice","paginate","pageNumber","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","totalCards","map","g","name","rating","genres","image","background_image","id","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/mirko/Desktop/Proyecto Individual Mirko Miler FT-45B/Proyecto-Individual/PI-Videogames-main/client/src/components/Videogames/Videogames.js"],"sourcesContent":["import React, {useState, useEffect } from 'react'\nimport NavBar from '../NavBar/NavBar'\nimport SearchBar from '../SearchBar/SearchBar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Videogame from '../VideoGame/Videogame'\nimport Pagination from '../Pagination/Pagination'\nimport FilteredBy from '../FilterBy/FilterBy'\nimport './videogames.css'\nimport { getAllGames, getGenres } from '../../actions/actions'\nimport notFound from '../../img/llorando.gif'\nimport loading from '../../img/loading.png'\n\n\nexport default function Videogames() {\n\n console.log('se ejetuto el constructor')\n  let allGames = useSelector((state) => state.filtered);//me traigo el estado global\n  const dispatch = useDispatch()//meto el metodo en una variable\n  const [currentPage, setCurrentPage] = useState(1) // estado de la página actual\n\n    const [cardPerPage] = useState(15) // cantidad de cards por página\n\n    //* indices de la paginación:\n    const indexOfLastCard = currentPage * cardPerPage // valor (15)\n    const indexOfFirstCard = indexOfLastCard - cardPerPage; // valor (0)\n\n    \n       const currentCards = allGames.slice(indexOfFirstCard, indexOfLastCard) // declara en la constante currentCards los \"cards\" que se deben mostrar en la pantalla (15)\n    \n    \n    const paginate = (pageNumber) => {\n         setCurrentPage(pageNumber) // actualiza el estado de la página actual\n    }\n\n    useEffect (() => {\n      console.log('se monto')\n      if (allGames.length === 0 ){ // si no hay juegos cargados en el estado global, entonces los carga\n        dispatch(getAllGames())//despacho la accion al reducer\n        dispatch(getGenres())} //despacho la accion al reducer\n        },[allGames.length, dispatch])  //si el estado de allGames cambia, se ejecuta el useEffect\n       \n        useEffect (() => { \n    return()=>console.log('se desmonto') },[]) //indico que quiero que haga una vez desmontado\n\n    return (\n      <div className=\"container\"> \n        <NavBar /> \n        <SearchBar />\n        <FilteredBy />\n        <Pagination // envío las props a Pagination.js\n          cardPerPage={cardPerPage} // cantidad de cards por página\n          totalCards={allGames.length} // cantidad total de cards\n          paginate={paginate} // función que actualiza el estado de la página actual\n          currentPage={currentPage} // página actual\n        />\n        <div className=\"games-div\">\n          {currentCards.length >= 1 ? ( // si hay juegos en el estado global, los muestra\n            currentCards.map((g) => ( // recorre el array de juegos\n              <Videogame // envía las props a Videogame.js\n                key={g.id} \n                name={g.name}\n                rating={g.rating}\n                genres={g.genres}\n                image={g.background_image}\n                id={g.id}\n                \n              />\n            ))\n          ) : typeof currentCards === \"string\" ? ( // si no hay juegos en el estado global, muestra un mensaje de error\n            <div>\n              <img className=\"nonono\" src={notFound} alt=\"\"></img>\n            </div>\n          ) : (\n            <div>\n              <img className=\"loading\" src={loading} alt=\"\"></img>\n            </div>\n          )}\n        </div>\n        <Pagination\n          cardPerPage={cardPerPage} \n          totalCards={allGames.length}\n          paginate={paginate}\n          currentPage={currentPage}\n        />\n      </div>\n    );\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}